import run.BottleTwin;


Orchestrator(
		input BottleTwin signal newBottleTwin;
		input signal request, conveyorMoved, rotTableTurned, filled, capLoaded, capOn;
		
		output signal recieveTwin, startConveyor, startRotTable, startFilling, startCapLoading;
		output BottleTwin signal bottlePos0, bottlePos1, bottlePos2, bottlePos3, bottlePos4, bottlePos5, bottlePos6, bottlePos7, bottlePos8, bottlePos9;
		output int signal bottlePos0B, bottlePos1B, bottlePos2B, bottlePos3B, bottlePos4B, bottlePos5B, bottlePos6B, bottlePos7B, bottlePos8B, bottlePos9B;
		)
->{	
	
	BottleTwin signal posZeroUpdate, posOneUpdate, posTwoUpdate, posThreeUpdate, posFourUpdate, posFiveUpdate, posSixUpdate, posSevenUpdate, posEightUpdate, posNineUpdate;
	signal filling, capLoading, startRobotLoaderThread, startConveyorThread, startRotThread, startCapLoaderThread, startRobotUnloaderThread, startFillerThread;
	signal checkRobotLoader, checkConveyor, checkRotTable, checkRobotUnloader;
	signal robotLoaderFinish, conveyorFinish, rotTableFinish, robotUnloaderFinish;
	// thread for getting new bottle
	{
		while(true){
			await(newBottleTwin);
		    System.err.println("Orchestrator newBottleTwin ");
			BottleTwin b = (BottleTwin)#newBottleTwin;
			
			if(b != null) {
				int ID = b.ID;
				String name = b.name;
			    System.out.println("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOo " + b);
			    System.out.println("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOo " + ID);
			    System.out.println("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOo " + name);
				emit posEightUpdate(b);
				pause;
				pause;
				await(!bottlePos8);
//				await(!request);
//				await(request);
				// emit recieve conformation to the backend
				await(!newBottleTwin);
				emit recieveTwin;
			}
		}
	}
	
	||
	
	// Bottle loader logic
	{
		while(true) {
			await(!request);
			await(request);
			
			

//			await(!request);
//			await(request);

			emit checkRobotLoader;
			await(robotLoaderFinish);
			pause;
			pause;

			emit checkRobotUnloader;
			await(robotUnloaderFinish);
			pause;
			pause;

//			await(!request);
//			await(request);
			

			emit checkConveyor;
			await(conveyorFinish);
			pause;
			pause;
			
			emit checkRobotLoader;
			await(robotLoaderFinish);
			pause;
			pause;

			emit checkRobotUnloader;
			await(robotUnloaderFinish);
			pause;
			pause;
			
			emit checkConveyor;
			await(conveyorFinish);
			pause;
			pause;

//			await(!request);
//			await(request);

			emit checkRotTable;
			await(rotTableFinish);
			pause;
			pause;

			

		}
	}

	||
	
	// Bottle loader logic
	{
		while(true) {
			await(checkRobotLoader);
			present(!bottlePos0 && bottlePos8){
				emit startRobotLoaderThread;
				pause;
			} else {
				pause;
				emit robotLoaderFinish;
			}
		}
	}
	
	||
	// Conveyor logic
	{
		while(true) {
			await(checkConveyor);
			present((!bottlePos7 && !bottlePos1 )&&(bottlePos0 || bottlePos5)){
				emit startConveyorThread;
				pause;
			} else {
				pause;
				emit conveyorFinish;
			}
		}
	}
	
	||
	// rotTable logic
	{
		while(true) {
			await(checkRotTable);
			// wait for plants
			present(bottlePos1 || bottlePos2 || bottlePos3 || bottlePos4 || bottlePos5 || bottlePos6){
				emit startRotThread;
				pause;
			} else {
				pause;
				emit rotTableFinish;

			}
		}
	}
	
	||
	// Bottle unloader logic
	{
		while(true) {
			await(checkRobotUnloader);
			present(bottlePos7){
				emit startRobotUnloaderThread;
				pause;
			} else {
				pause;
				emit robotUnloaderFinish;
			}
		}
	}

	||
	
	// Bottle loader thread
	{
		while(true) {
			await(startRobotLoaderThread);
			// wait for plant update first
			BottleTwin bEight = (BottleTwin)#posEightUpdate;
			pause;
			emit posEightUpdate(null);
			emit posZeroUpdate(bEight);
		
			pause;
			emit robotLoaderFinish;
			await(!startRobotLoaderThread);

		}
	}

	
	||
	
	// Conveyor thread
	{
		while(true) {
			await(startConveyorThread);
			// wait for plant update first
			BottleTwin bZero = (BottleTwin)#posZeroUpdate;
			BottleTwin bFive = (BottleTwin)#posFiveUpdate;
			pause;
			emit posZeroUpdate(null);
			emit posFiveUpdate(null);
			emit posOneUpdate(bZero);
			emit posSevenUpdate(bFive);
			
			pause;
			await(!posFiveUpdate);
			emit conveyorFinish;
			await(!startConveyorThread);
			
		}
	}
	
	||
	
	// rotTable thread
	{
		while(true) {
			await(startRotThread);
		
			// wait for plant update first
			BottleTwin bOne = (BottleTwin)#posOneUpdate;
			BottleTwin bTwo = (BottleTwin)#posTwoUpdate;
			BottleTwin bThree = (BottleTwin)#posThreeUpdate;
			BottleTwin bFour = (BottleTwin)#posFourUpdate;
			BottleTwin bFive = (BottleTwin)#posFiveUpdate;
			BottleTwin bSix = (BottleTwin)#posSixUpdate;
			pause;
			emit posOneUpdate(bSix);
			emit posTwoUpdate(bOne);
			emit posThreeUpdate(bTwo);
			emit posFourUpdate(bThree);
			emit posFiveUpdate(bFour);
			emit posSixUpdate(bFive);
			
			pause;
			emit rotTableFinish;
			await(!startRotThread);
				
		}
	}

	||
	
	// Bottle unloader thread
	{
		while(true) {
			await(startRobotUnloaderThread);
			// wait for plant update first
			BottleTwin bSeven = (BottleTwin)#posSevenUpdate;
			pause;
			emit posSevenUpdate(null);
			emit posNineUpdate(bSeven);
		
			pause;
			emit robotUnloaderFinish;
			await(!startRobotUnloaderThread);

		}
	}

	||
	
	// filler thread
	{
		while(true) {
			await(startFillerThread);
			// wait for plant update first		
			pause;
			emit startFilling;
			await(!startFillerThread);
		}
	}

	
	
	
	||
	
	// sustain bottlepos0 when bottle arrives
	{
		while(true){
			BottleTwin b = (BottleTwin)#posZeroUpdate;
			pause;
			if (b != null) {
				int id = b.ID;
				abort(posZeroUpdate){
					emit bottlePos0B(id);
					sustain bottlePos0(b);
				}
			} else {
				emit bottlePos0B(-1);
				await(posZeroUpdate);
			}
		}	
	}
	
	||
	
	{
		while(true){
			BottleTwin b = (BottleTwin)#posOneUpdate;
			pause;
			if (b != null) {
				int id = b.ID;
				abort(posOneUpdate){
					emit bottlePos1B(id);
					sustain bottlePos1(b);
				}
			} else {
				emit bottlePos1B(-1);
				await(posOneUpdate);
			}
		}	
	}
	
	||

	{
		while(true){
			BottleTwin b = (BottleTwin)#posTwoUpdate;
			pause;
			if (b != null) {
				int id = b.ID;
				abort(posTwoUpdate){
					emit bottlePos2B(id);
					sustain bottlePos2(b);
				}
			} else {
				emit bottlePos2B(-1);
				await(posTwoUpdate);
			}
		}	
			
	}
	
	||

	{
		while(true){
			BottleTwin b = (BottleTwin)#posThreeUpdate;
			pause;
			if (b != null) {
				int id = b.ID;
				abort(posThreeUpdate){
					emit bottlePos3B(id);
					sustain bottlePos3(b);
				}
			} else {
				emit bottlePos3B(-1);
				await(posThreeUpdate);
			}
		}	
	}
	
		||

	{
		while(true){
			BottleTwin b = (BottleTwin)#posFourUpdate;
			pause;
			if (b != null) {
				int id = b.ID;
				abort(posFourUpdate){
					emit bottlePos4B(id);
					sustain bottlePos4(b);
				}
			} else {
				emit bottlePos4B(-1);
				await(posFourUpdate);
			}
		}	
	}
		
		||

	{
		while(true){
			BottleTwin b = (BottleTwin)#posFiveUpdate;
			pause;
			if (b != null) {
				int id = b.ID;
				abort(posFiveUpdate){
					emit bottlePos5B(id);
					sustain bottlePos5(b);
				}
			} else {
				emit bottlePos5B(-1);
				await(posFiveUpdate);
			}
		}	
	}
		
		||

	{
		while(true){
			BottleTwin b = (BottleTwin)#posSixUpdate;
			pause;
			if (b != null) {
				int id = b.ID;
				abort(posSixUpdate){
					emit bottlePos6B(id);
					sustain bottlePos6(b);
				}
			} else {
				emit bottlePos6B(-1);
				await(posSixUpdate);
			}
		}	
	}
		
		||

	{
		while(true){
			BottleTwin b = (BottleTwin)#posSevenUpdate;
			pause;
			if (b != null) {
				int id = b.ID;
				abort(posSevenUpdate){
					emit bottlePos7B(id);
					sustain bottlePos7(b);
				}
			} else {
				emit bottlePos7B(-1);
				await(posSevenUpdate);
			}
		}	
	}
		
		||

	{
		while(true){
			BottleTwin b = (BottleTwin)#posEightUpdate;
			pause;
			if (b != null) {
				int id = b.ID;
				abort(posEightUpdate){
					emit bottlePos8B(id);
					sustain bottlePos8(b);
				}
			} else {
				emit bottlePos8B(-1);
				await(posEightUpdate);
			}
		}	
	}
		
		||

	{
		while(true){
			pause;
			BottleTwin b = (BottleTwin)#posNineUpdate;
			if (b != null) {
				int id = b.ID;
				abort(posNineUpdate){
					emit bottlePos9B(id);
					sustain bottlePos9(b);
				}
			} else {
				emit bottlePos9B(-1);
				await(posNineUpdate);
			}
		}	
	}


}
