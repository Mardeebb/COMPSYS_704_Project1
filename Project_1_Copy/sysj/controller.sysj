import run.BottleTwin;


Orchestrator(
		input BottleTwin signal newBottleTwin;
		input signal request;
		output signal recieveTwin, moveConveyor;
		output BottleTwin signal bottleToConveyor;
		)
->{
	{
		while(true){
		    System.err.println("new Orchestrator Cycle");

			await(newBottleTwin);
		    System.err.println("newBottleTwin ");

			BottleTwin b = (BottleTwin)#newBottleTwin;
			if(b != null) {
				int ID = b.ID;
				String name = b.name;
			    System.out.println("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOo " + b);
			    System.out.println("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOo " + ID);
			    System.out.println("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOo " + name);
			    await(!newBottleTwin);
				await(request);
				emit bottleToConveyor(b);
				emit moveConveyor;
				
				emit recieveTwin;
			}
		}
	}
}

conveyorController(
		input signal move;

		input signal bottleAtPos1, bottleLeftPos5;
		output signal motConveyorOnOff;
		output signal conveyorMoving, conveyorStop;
		)
->{
	{
		while(true){
			await(move);
			await(!bottleAtPos1);
			abort(bottleAtPos1){
				emit conveyorMoving;
				sustain motConveyorOnOff;
			}
			emit conveyorStop;
		}
	}
}


//
//Controller(
//		input signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty,request;
//		output signal pusherExtend,vacOn,armSource,armDest;
//		input Integer signal mode;
//		input signal pusherExtendM,vacOnM,armSourceM,armDestM;
//		)
//->{
///* TODO: Write control-logic */
//    System.out.println("Controller startedh");
//    signal automode, manual, startauto;
//	{
//		// pusher control
//		while(true){
//			abort(!automode){
//				await(request && !empty);
//				abort(armAtDest){
//					sustain armDest;
//				}; 
//				pause;
//				abort(pusherExtended){
//					sustain pusherExtend;
//				}
//				pause;
//				await(pusherRetracted);
//				abort(armAtSource){
//					sustain armSource;
//				};
//				pause;
//				abort(WPgripped){
//					sustain vacOn;
//					await(WPgripped);
//				};
//				pause;
//				abort(armAtDest){
//					while(true){
//						emit vacOn;
//						emit armDest;
//						pause;
//					}
//				}
//				await(!WPgripped);
//				abort(armAtSource){
//					sustain armSource;
//				};
//			}
//		}
//	}
//	||
//	{
//		while(true){
//		    	abort(manual){
//			    	sustain automode;
//		    	}
//			await(!manual);
//		}
//	}
//	||
//	{
//		while(true){
//			Integer m = (Integer)#mode;
//			if (m != null) {
//			    if (m.intValue() == 1) {
//			    	abort(startauto){
//				    	sustain manual;
//			    	}
//			    }
//			}
//			pause;
//		}
//	}
//	||
//	{
//		while(true){
//			Integer m = (Integer)#mode;
//			if (m != null) {
//			    if (m.intValue() == 0) {
//			    	emit startauto;
//			    }
//			}
//			await(manual);
//		}
//	}
//
//	||
//	{
//		while(true){
//			await(pusherExtendM && manual);
//			abort(!pusherExtendM || automode){
//				sustain pusherExtend;
//			}
//		}
//	}
//	||
//	{
//		while(true){
//			await(vacOnM && manual);
//			abort(!vacOnM || automode){
//				sustain vacOn;
//			}
//		}
//	}
//	||
//	{
//		while(true){
//			await(armSourceM && manual);
//			abort(!armSourceM || automode){
//				sustain armSource;
//			}
//		}
//	}
//	||
//	{
//		while(true){
//			await(armDestM && manual);
//			abort(!armDestM || automode){
//				sustain armDest;
//			}
//		}
//	}
//}

CapperController (
		input signal bottleAtPos4, gripperZAxisLowered, gripperZAxisLifted;
		input signal gripperTurnHomePos, gripperTurnFinalPos;
		input signal gripperGripped, cylClamped;
		
		output signal cylPos5ZAxisExtend, gripperTurnRetract, gripperTurnExtend, capGripperPos5Extend;
		output signal cylClampBottleExtend;
		)
-> {
	System.out.println("Capper CD");
	{
		signal releaseCap, raiseGripper, unclampBottle; 
		{
			while(true) {
				// wait until bottle is at position 4
				//await(bottleAtPos4);
				
				abort(unclampBottle) {
					System.out.println("Bottle clamped");
					sustain cylClampBottleExtend; // keep bottle clamped
				}
				
			}
		}
		||
		{
			while(true) {
				//await(bottleAtPos4);
				waitl(4 s);
				abort(raiseGripper) {
					System.err.println("gripper lowered");
					sustain cylPos5ZAxisExtend; // keep gripper lowered
				}
				System.err.println("lifted");
				pause;
			}
		}
		||
		{
			while(true) {
				//await(bottleAtPos4);
				{await(gripperZAxisLowered);} || {await(cylClamped);}
				System.out.println("gripped the cap");
				abort(releaseCap) {
					sustain capGripperPos5Extend; // grip cap when lowered and clamped
				}
			}
		}
		||
		{
			while(true) {
				//await(bottleAtPos4);
				await(gripperGripped);
				
				abort(gripperTurnFinalPos) {
					System.out.println("Twist");
					sustain gripperTurnExtend; // twist the gripper
				}
				
				emit releaseCap;
				abort (gripperTurnHomePos) {
					System.out.println("retract");
					sustain gripperTurnRetract; // retract
				}
				emit raiseGripper ;
				System.err.println("raise the gripper");
				emit unclampBottle;
			}
		}
	}
}

rotController(
		input signal turn;

		input signal tableAlignedWithSensorC ;
		output signal rotaryTableTrigger;
		)
->{
    System.out.println("Controller startedh");
	{
		// pusher control
		while(true){
			await(turn);

			abort(tableAlignedWithSensorC){
				sustain rotaryTableTrigger;
			}
			await(!turn);
		}
	}
}

fController(
		input signal bottleAtPos2, dosUnitEvac, dosUnitFilled;
		// input signal fillerRequest
		output signal valveInjectorOnOff, valveInletOnOff, dosUnitValveRetract, dosUnitValveExtend; 
		// output signal fillerStatus, bottleStatus; 
		)
->{
	System.out.println("filler Controller started");
	{

	  while (true) {
	    //await(bottleAtPos2);             // new bottle at P2
	    // Phase 1: go up & inject until TOP
	    abort(dosUnitFilled) {
	      sustain dosUnitValveRetract;
	    }
	    pause;                            
	
	    // Phase 2: open inlet & go down until BOTTOM
	    abort(dosUnitEvac) {
	      sustain dosUnitValveExtend;
	    }                        
	  }
	}
	||
	{
		while (true) {
	    //await(bottleAtPos2);             // new bottle at P2
	    // Phase 1: go up & inject until TOP
	    abort(dosUnitFilled) {
	      sustain valveInjectorOnOff;
	    }
	    pause;                            
	
	    // Phase 2: open inlet & go down until BOTTOM
	    abort(dosUnitEvac) {
	      sustain valveInletOnOff;
	    }                        
	  }
	}

}


bController(
	input signal bottleLoad, bottleUnload, CMDfb_L, CMDfb_L2, CMDfb_R, CMDfb_R2;
	output String signal CMD_L, CMD_L2, CMD_R,CMD_R2 ;
	)
->{
	System.out.println("Baxtor robot Controller started");
	{
		while(true){
			abort(CMDfb_L){
				sustain CMD_L("limb_moveto left_limb B"); // Moves the arm to the position B
			}
			abort(CMDfb_L2 ){
				sustain CMD_L2("limb_gripper left_limb open"); 
			}
			abort(CMDfb_L){
				sustain CMD_L("limb_gripper left_limb close"); 
			}
			abort(CMDfb_L2){
				sustain CMD_L2("limb_moveto left_limb C"); 
			}
			abort(CMDfb_L){
				sustain CMD_L("limb_gripper left_limb open"); 
			}
			abort(CMDfb_L2){
				sustain CMD_L2("limb_moveto left_limb A"); //Move the arm back to the pickup location (Position A
			}
		}
	}
	||
	{
		while(true){
			abort(CMDfb_R){
				sustain CMD_R("limb_moveto right_limb B"); // Moves the arm to the position B
			}
			abort(CMDfb_R2 ){
				sustain CMD_R2("limb_gripper right_limb open"); 
			}
			abort(CMDfb_R){
				sustain CMD_R("limb_gripper right_limb close"); 
			}
			abort(CMDfb_R2){
				sustain CMD_R2("limb_moveto right_limb C"); 
			}
			abort(CMDfb_R){
				sustain CMD_R("limb_gripper right_limb open"); 
			}
			abort(CMDfb_R2){
				sustain CMD_R2("limb_moveto right_limb A"); //Move the arm back to the pickup location (Position A
			}
		}
	}
}
	


