Orchestrator(
		input signal conveyorStatus, fillerStatus, capperStatus, rotaryTableStatus;
		input signal capLoaderStatus, robotLoaderStatus, robotUnloaderStatus;
		output signal rotaryTableRequest;
		)
->{
<<<<<<< HEAD
/* TODO: Write control-logic */
    System.out.println("Controller startedh");
    signal automode, manual, startauto;
	{
		// pusher control
		while(true){
			abort(!automode){
				await(request && !empty);
				abort(armAtDest){
					sustain armDest;
				}; 
				pause;
				abort(pusherExtended){
					sustain pusherExtend;
				}
				pause;
				await(pusherRetracted);
				abort(armAtSource){
					sustain armSource;
				};
				pause;
				abort(WPgripped){
					sustain vacOn;
					await(WPgripped);
				};
				pause;
				abort(armAtDest){
					while(true){
						emit vacOn;
						emit armDest;
						pause;
					}
				}
				await(!WPgripped);
				abort(armAtSource){
					sustain armSource;
				};
			}
		}
	}
	||
	{
		while(true){
		    	abort(manual){
			    	sustain automode;
		    	}
			await(!manual);
		}
	}
	||
	{
		while(true){
			Integer m = (Integer)#mode;
			if (m != null) {
			    if (m.intValue() == 1) {
			    	abort(startauto){
				    	sustain manual;
			    	}
			    }
			}
			pause;
		}
	}
	||
	{
		while(true){
			Integer m = (Integer)#mode;
			if (m != null) {
			    if (m.intValue() == 0) {
			    	emit startauto;
			    }
			}
			await(manual);
		}
	}

	||
	{
		while(true){
			await(pusherExtendM && manual);
			abort(!pusherExtendM || automode){
				sustain pusherExtend;
			}
		}
	}
	||
	{
		while(true){
			await(vacOnM && manual);
			abort(!vacOnM || automode){
				sustain vacOn;
			}
		}
	}
	||
	{
		while(true){
			await(armSourceM && manual);
			abort(!armSourceM || automode){
				sustain armSource;
			}
		}
	}
	||
	{
		while(true){
			await(armDestM && manual);
			abort(!armDestM || automode){
				sustain armDest;
			}
		}
	}
<<<<<<< Updated upstream
=======
=======
	System.out.println("Orchestrator");
	{
		while(true) {
			emit rotaryTableRequest;
			
			pause;
		}
	}
>>>>>>> af53be5449f55306e870e1151cf69cfc012489e8
>>>>>>> Stashed changes
}

FillerController(
		input signal bottleAtPos2, dosUnitEvac, dosUnitFilled, fillerRequest;
		)
-> {
	System.out.println("Filler");
	{
		
	}
}



RotaryTableController(
		input signal rotaryTableRequest;
		input signal enable, tableAlignedWithSensorC;
		output signal rotaryTableTrigger;
		)
->{
/* TODO: Write control-logic */
    System.out.println("Rotary table controller started");
	{
		// pusher control
		while(true){
			await(enable);
			abort(tableAlignedWithSensorC){
				sustain rotaryTableTrigger;
			}
			await(!enable);
		}
	}
}

	


