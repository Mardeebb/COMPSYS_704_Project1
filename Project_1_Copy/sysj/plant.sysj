import run.GUI;
import run.BottleTwin;



Plant(
		input signal pusherExtend,vacOn,armSource,armDest;
		input signal enable,refill;
		output signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty;
		output signal pusherRetractedE,pusherExtendedE,WPgrippedE,armAtSourceE,armAtDestE,emptyE;
		)
->
{
	new Thread(new GUI()).start();

//	signal capDec;
//	int signal capPos;
//	emit capPos(0);
//	{// Arm
//		while(true){
//			abort(armSource && enable){
//				sustain armAtDest;
//			}
//			await(!enable);
//			abort(armDest && enable){
//				sustain armAtSource;
//			}
//			await(!enable);
//		}
//	}
//	||
//	{// Pusher
//		while(true){
//			abort(pusherExtend && enable){
//				sustain pusherRetracted;
//			}
//			await(!enable);
//			abort(!pusherExtend && enable){
//				sustain pusherExtended;
//			}
//			await(!enable);
//		}
//	}
//	||
//	{// Vacuum
//		while(true){
//			present(vacOn && armAtSource){
//				if((Integer)#capPos == 1){
//					emit capPos(0);
//					abort(!vacOn){
//						sustain WPgripped; 
//					}
//					present(armAtSource){
//						emit capPos(1);
//					}
//				}
//			}
//			pause;
//		}
//	}
//	||
//	{
//		/*
//		 * Cap positions
//		 * 0 = at Mag
//		 * 1 = at pick-up
//		 */
//		while(true){
//			// At mag
//			abort(empty){
//				while(true){
//						await(pusherRetracted);
//						await(pusherExtended);
//						// At pick-up
//						emit capPos(1);
//						await(pusherRetracted);
//						emit capDec;
//				}
//			}
//			await(refill);
//		}
//	}
//	||
//	{
//		int capcount = 5;
//		while(true){
//			present(capDec){
//				if(capcount > 0)
//					capcount--;
//			}
//			present(refill){
//				capcount = 5;
//			}
////			present(pusherRetracted){
//				if(capcount == 0)
//					emit empty;
////			}
//			pause;
//		}
//	}
//	||
//	{// To viz
//		{while(true){present(pusherRetracted){emit pusherRetractedE;} pause;}}
//		||
//		{while(true){present(pusherExtended){emit pusherExtendedE;} pause;}}
//		||
//		{while(true){present(WPgripped){emit WPgrippedE;} pause;}}
//		||
//		{while(true){present(armAtSource){emit armAtSourceE;} pause;}}
//		||
//		{while(true){present(armAtDest){emit armAtDestE;} pause;}}
//		||
//		{while(true){present(empty){emit emptyE;} pause;}}
//	}
}

CapperPlant (
		input signal cylPos5ZaxisExtend, gripperTurnRetracted, gripperTurnExtend, capGripperPos5Extend;
		input signal cylClampBottleExtend;
		input signal enable;
		
		output signal bottleAtPos4, gripperZAxisLowered, gripperZAxisLifted;
		output signal gripperTurnHomePos, gripperTurnFinalPos;
		
		output signal gripperZAxisLoweredE, gripperZAxisLiftedE;
		output signal gripperTurnHomePosE, gripperTurnFinalPosE;
		)
-> {
	{
		while(true) {
			await(enable);
			abort(!enable) {
				sustain bottleAtPos4;
			}
			pause;
		}
	}
	||
	{
		while(true) {
			abort(!cylPos5ZaxisExtend && enable) {
				sustain gripperZAxisLowered; // when the gripper/capper is lowered
			}
				
			await(!enable);
			abort(cylPos5ZaxisExtend && enable) {
				sustain gripperZAxisLifted; // when the gripper/capper is lifted
			}
			await(!enable);
			abort(capGripperPos5Extend && cylClampBottleExtend && gripperTurnExtend && enable) {
				sustain gripperTurnHomePos; // gripper initial position
			}
		
			await(!enable);
			abort (!capGripperPos5Extend && !cylClampBottleExtend && gripperTurnRetracted && enable) {
				sustain gripperTurnFinalPos; // gripper final position 
			}
			await(!enable);
		}
	}
	||
	{
		{while(true) {present(gripperZAxisLowered){emit gripperZAxisLoweredE;} pause;}}
		||
		{while(true) {present(gripperZAxisLifted){emit gripperZAxisLiftedE;} pause;}}
		||
		{while(true) {present(gripperTurnHomePos){emit gripperTurnHomePosE;} pause;}}
		||
		{while(true) {present(gripperTurnFinalPos){emit gripperTurnFinalPosE;} pause;}}
	}
}


rotPlant(
		input signal rotaryTableTrigger, enable, bottleIn;
		output signal bottleAtPos5, tableAlignedWithSensor, capOnBottleAtPos1, tableAlignedWithSensorC;
		// GUI signal
		output signal rotTurn, rotContent;
)
->
{
	int signal posOne, posFive, turn;
	{
		int[] packedArray = new int[6]; 
		int pos = 0;
		for(int i = 0; i < 6; i++){
		    packedArray[i] = 0;
		}
		
	    packedArray[0] = 5;
	    packedArray[3] = 1;
	    
		while(true){
			abort(!rotaryTableTrigger){
				await(rotaryTableTrigger);
				await(enable);
				int pos1 = packedArray[0];
				int pos5 = packedArray[4];
				emit rotTurn(packedArray);
				emit posOne(pos1);
				emit posFive(pos5);
				int[] newPackedArray = new int[6]; 
				newPackedArray[0] = packedArray[5];
	
				for(int i = 1; i < 6; i++){
					newPackedArray[i] = packedArray[i - 1];
				}
				packedArray = newPackedArray;
				sustain tableAlignedWithSensorC;
			}
		}
	}
	
	||
	
	{
		while(true) {
			if((Integer)#posOne == 5){
//				emit capOnBottleAtPos1;
			}
			if((Integer)#posFive != 0){
//				emit bottleAtPos5;
			}
			pause;
		}
	}
}


conveyorPlant(
		input signal motConveyorOnOff, enable;
		
		// real world sim signal a bottle has been placed
		input BottleTwin signal bottleArriveToZero, bottleArriveToFive, roturn;
		
		output signal bottleAtPos1, bottleLeftPos5;
		
		// backend update
		output signal pos0, pos1, pos5, pos7;

)
->
{
	signal conveyorMove;
	BottleTwin signal posZero, posOne, posFive, posSeven;
	{
		while(true) {
			await(motConveyorOnOff);
			await(enable);
			abort(!motConveyorOnOff){
				BottleTwin bZero = (BottleTwin)#posZero;
				BottleTwin bFive = (BottleTwin)#posFive;

				if(bZero != null) {
					emit posOne(bZero);
					emit posZero(null);
					emit pos0(-1);

				}
				if(bFive != null) {
					emit posSeven(bFive);
					emit posFive(null);
					emit pos5(-1);
				}

			}
		}
	}
	
	||
	
	{
		while(true) {
			await(bottleArriveToZero);
			BottleTwin b = (BottleTwin)#bottleArriveToZero;
//			abort(conveyorMove){
//				sustain posZero(b)
//			}
			int id = b.ID;
			emit pos0(id);
			emit posZero(b);
		}
		
	}
	
	||
	
	{
		while(true) {
			await(bottleArriveToFive);
			BottleTwin b = (BottleTwin)#bottleArriveToFive;
//			abort(conveyorMove){
//				sustain posFive(b)
//			}
			int id = b.ID;
			emit pos5(id);
			emit posFive(b);
		}
	}
	
	||
	
	{
		while(true) {
			await(roturn);
			emit posOne(null);
		}
	}
	
	||
	
	{
		while(true) {
			await(posOne);
			BottleTwin b = (BottleTwin)#posOne;
			int id = b.ID;
			abort(roturn){
				emit pos1(id);
				sustain bottleAtPos1;
			}
		}
	}

}


fPlant(
    input signal valveInjectorOnOff, valveInletOnOff, dosUnitValveRetract, dosUnitValveExtend;
    input signal enable;
    output signal bottleAtPos2, dosUnitEvac, dosUnitFilled;
    output signal dosUnitEvacE, dosUnitFilledE;
)
-> {

    // Bottle at position 2 
    {
        while(true){
            // For now simulate bottle always available when enabled
            await(enable);
            abort(!enable){
                sustain bottleAtPos2;
            }
            
        }
    }
    ||

    //  canister unit 
    {
        while(true){
            // Retract = canister up
            abort(dosUnitValveRetract && enable){
                sustain  dosUnitEvac;  // at top
            }
            await(!enable);

            // Extend = canister down
            abort(dosUnitValveExtend && enable){
                sustain dosUnitFilled;    // at bottom
            }
            await(!enable);
        }
    }
        ||

    // To viz (for GUI signals) 
    {
        {while(true){present(dosUnitEvac){emit dosUnitEvacE;} pause;}}
        ||
        {while(true){present(dosUnitFilled){emit dosUnitFilledE;} pause;}}

    }

}

bPlant(
	input String signal CMD_L, CMD_L2, CMD_R, CMD_R2;
	input signal enable;
	output signal bottleLoad, bottleUnload, CMDfb_L, CMDfb_L2, CMDfb_R, CMDfb_R2; 
	output String signal CMD_LE, CMD_L2E, CMD_RE, CMD_R2E;
)
-> 
{
  System.out.println("Baxter robot Plant started");

  // LEFT limb simulator
  {
    while (true) {
      // Simulated action time (2 logical ticks works well)
 	  await(enable);  
      await(!enable);  
      abort(CMD_L2){
    	  sustain CMDfb_L; 
      }
 	  await(enable);  
      await(!enable);  
      abort(CMD_L){
    	  sustain CMDfb_L2;              // acknowledge completion
      }
    }
  }
  ||
	{
		{while(true){
		      present(CMD_L){
			      String s = (String)#CMD_L;
			      System.err.println("[PLANT L] got: " + s);   
			      emit CMD_LE(s);
		      }
		      pause;
		      pause;
		      pause;
		      pause;
		      pause;
			}
		}
		||
		{while(true){
		      present(CMD_L2){
			      String s = (String)#CMD_L2;
			      System.err.println("[PLANT L2] got: " + s);    
			      emit CMD_L2E(s);
		      }
		      pause;
		      pause;
		      pause;
		      pause;
		      pause;
			}
		}
		
	}

  // RIGHT limb simulator 
  {
    while (true) {
      await(CMD_R);                    // wait for any right-limb command
      String s = (String)#CMD_R;     
      System.err.println("[PLANT R] got: !!!!!!!!!!!!!!!" + s);     
      await(enable);  
      await(!enable); 
      emit CMDfb_R;                    // acknowledge completion
    }
  }

}


